import{_ as t,c as i,a as l,b as a,d as s,e,o as c,r as o}from"./app-vAERMEX6.js";const u={},r={href:"http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html",target:"_blank",rel:"noopener noreferrer"},d={href:"http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation",target:"_blank",rel:"noopener noreferrer"},v={href:"http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list",target:"_blank",rel:"noopener noreferrer"},m={href:"http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list",target:"_blank",rel:"noopener noreferrer"},b={href:"http://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#memory-optimizations",target:"_blank",rel:"noopener noreferrer"},h={href:"http://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY",target:"_blank",rel:"noopener noreferrer"};function g(f,n){const p=o("ExternalLinkIcon");return c(),i("div",null,[n[37]||(n[37]=l(`<h1 id="cuda入门" tabindex="-1"><a class="header-anchor" href="#cuda入门"><span>CUDA入门</span></a></h1><h2 id="加速系统" tabindex="-1"><a class="header-anchor" href="#加速系统"><span>加速系统</span></a></h2><p><em>加速系统又称异构系统，由 CPU 和 GPU 组成。加速系统会运行 CPU 程序，这些程序也会转而启动将受益于 GPU 大规模并行计算能力的函数。本实验环境是一个包含 NVIDIA GPU 的加速系统。可以使用</em> <code>*nvidia-smi*</code> <em>(Systems Management Interface</em>) 命令行命令查询有关此 GPU 的信息。现在，可以在下方的代码执行单元上使用 <code>CTRL</code> + <code>ENTER</code> 发出 <code>nvidia-smi</code> 命令。无论您何时需要执行代码，均可在整个实验中找到这些单元。代码运行后，运行该命令的输出将打印在代码执行单元的正下方。在运行下方的代码执行块后，请注意在输出中找到并记录 GPU 的名称。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token operator">!</span>nvidia-smi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="由gpu加速的还是纯cpu的应用程序" tabindex="-1"><a class="header-anchor" href="#由gpu加速的还是纯cpu的应用程序"><span>由GPU加速的还是纯CPU的应用程序</span></a></h2><h2 id="为gpu编写应用程序代码" tabindex="-1"><a class="header-anchor" href="#为gpu编写应用程序代码"><span>为GPU编写应用程序代码</span></a></h2><p>CUDA 为许多常用编程语言提供扩展，而在本实验中，我们将会为 C/C++ 提供扩展。这些语言扩展可让开发人员在 GPU 上轻松运行其源代码中的函数。以下是一个<code>.cu</code>文件（<code>.cu</code>是 CUDA 加速程序的文件扩展名）。其中包含两个函数，第一个函数将在 CPU 上运行，第二个将在 GPU 上运行。请抽点时间找出这两个函数在定义方式和调用方式上的差异。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token function">voidCPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This function is defined to run on the CPU.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token function">voidGPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This function is defined to run on the GPU.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">intmain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">CPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  GPUFunction<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是一些需要特别注意的重要代码行，以及加速计算中使用的一些其他常用术语：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">__global__ void GPUFunction()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>__global__关键字表明以下函数将在 GPU 上运行并可全局调用，而在此种情况下，则指由 CPU 或 GPU 调用。</li><li>通常，我们将在 CPU 上执行的代码称为主机代码，而将在 GPU 上运行的代码称为设备代码。</li><li>注意返回类型为void。使用__global__关键字定义的函数需要返回void类型。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>通常，当调用要在 GPU 上运行的函数时，我们将此种函数称为已启动的核函数。</li><li>启动核函数时，我们必须提供执行配置，即在向核函数传递任何预期参数之前使用&lt;&lt;&lt; ... &gt;&gt;&gt;语法完成的配置。</li><li>在宏观层面，程序员可通过执行配置为核函数启动指定线程层次结构，从而定义线程组（称为线程块）的数量，以及要在每个线程块中执行的线程数量。稍后将在本实验深入探讨执行配置，但现在请注意正在使用包含1线程（第二个配置参数）的1线程块（第一个执行配置参数）启动核函数。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">cudaDeviceSynchronize();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>与许多 C/C++ 代码不同，核函数启动方式为异步：CPU 代码将继续执行而无需等待核函数完成启动。</li><li>调用 CUDA 运行时提供的函数cudaDeviceSynchronize将导致主机 (CPU) 代码暂作等待，直至设备 (GPU) 代码执行完成，才能在 CPU 上恢复执行</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h3><h3 id="练习-编写一个hello-gpu核函数" tabindex="-1"><a class="header-anchor" href="#练习-编写一个hello-gpu核函数"><span>练习：编写一个Hello GPU核函数</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">helloCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from the CPU.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Refactor the \`helloGPU\` definition to be a kernel</span>
<span class="line"> * that can be launched on the GPU. Update its message</span>
<span class="line"> * to read &quot;Hello from the GPU!&quot;</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">helloGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello also from the GPU.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  helloGPU<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">helloCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  helloGPU<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Refactor this call to \`helloGPU\` so that it launches</span>
<span class="line">   * as a kernel on the GPU.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Add code below to synchronize on the completion of the</span>
<span class="line">   * \`helloGPU\` kernel completion before continuing the CPU</span>
<span class="line">   * thread.</span>
<span class="line">   */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编译并运行加速后的cuda代码" tabindex="-1"><a class="header-anchor" href="#编译并运行加速后的cuda代码"><span>编译并运行加速后的CUDA代码</span></a></h3><p>本节包含上述为编译和运行 <code>.cu</code> 程序而调用的<code>nvcc</code> 命令的详细信息。</p>`,20)),a("p",null,[n[2]||(n[2]=s("CUDA 平台附带 ")),a("a",r,[n[0]||(n[0]=a("strong",null,"NVIDIA CUDA 编译器",-1)),e(p)]),n[3]||(n[3]=s()),n[4]||(n[4]=a("code",null,"nvcc",-1)),n[5]||(n[5]=s("，可以编译 CUDA 加速应用程序，其中包含主机和设备代码。就本实验而言，")),n[6]||(n[6]=a("code",null,"nvcc",-1)),n[7]||(n[7]=s(" 的讨论范围将根据我们的迫切需求据实确定。完成本实验学习后，有意深究 ")),n[8]||(n[8]=a("code",null,"nvcc",-1)),n[9]||(n[9]=s(" 的所有用户均可从 ")),a("a",d,[n[1]||(n[1]=s("文档")),e(p)]),n[10]||(n[10]=s(" 开始入手。"))]),n[38]||(n[38]=l(`<p>曾使用过 <code>gcc</code> 的用户会对 <code>nvcc</code> 感到非常熟悉。例如，编译 <code>some-CUDA.cu</code> 文件就很简单：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">nvcc -arch=sm_70 -o out some-CUDA.cu -run</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),a("ul",null,[n[23]||(n[23]=a("li",null,[a("code",null,"nvcc"),s(" 是使用 "),a("code",null,"nvcc"),s(" 编译器的命令行命令。")],-1)),n[24]||(n[24]=a("li",null,[s("将 "),a("code",null,"some-CUDA.cu"),s(" 作为文件传递以进行编译。")],-1)),n[25]||(n[25]=a("li",null,[a("code",null,"o"),s(" 标志用于指定编译程序的输出文件。")],-1)),a("li",null,[n[14]||(n[14]=a("code",null,"arch",-1)),n[15]||(n[15]=s(" 标志表示该文件必须编译为哪个")),n[16]||(n[16]=a("strong",null,"架构",-1)),n[17]||(n[17]=s("类型。本示例中，")),n[18]||(n[18]=a("code",null,"sm_70",-1)),n[19]||(n[19]=s(" 将用于专门针对本实验运行的 Volta GPU 进行编译，但有意深究的用户可以参阅有关 ")),a("a",k,[n[11]||(n[11]=s("arch 标志")),e(p)]),n[20]||(n[20]=s("、")),a("a",v,[n[12]||(n[12]=s("虚拟架构特性")),e(p)]),n[21]||(n[21]=s(" 和 ")),a("a",m,[n[13]||(n[13]=s("GPU特性")),e(p)]),n[22]||(n[22]=s(" 的文档。"))]),n[26]||(n[26]=a("li",null,[s("为方便起见，提供 "),a("code",null,"run"),s(" 标志将执行已成功编译的二进制文件。")],-1))]),n[39]||(n[39]=l(`<h2 id="cuda的线程层次结构" tabindex="-1"><a class="header-anchor" href="#cuda的线程层次结构"><span>CUDA的线程层次结构</span></a></h2><h2 id="启动并行运行的核函数" tabindex="-1"><a class="header-anchor" href="#启动并行运行的核函数"><span>启动并行运行的核函数</span></a></h2><p>程序员可通过执行配置指定有关如何启动核函数以在多个 GPU <strong>线程</strong>中并行运行的详细信息。更准确地说，程序员可通过执行配置指定线程组（称为<strong>线程块</strong>或简称为<strong>块</strong>）数量以及其希望每个线程块所包含的线程数量。执行配置的语法如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;&lt;&lt; NUMBER_OF_BLOCKS, NUMBER_OF_THREADS_PER_BLOCK&gt;&gt;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>启动核函数时，核函数代码由每个已配置的线程块中的每个线程执行</strong>。</p><p>因此，如果假设已定义一个名为 <code>someKernel</code> 的核函数，则下列情况为真：</p><ul><li>配置为在具有单线程的单个线程块中运行后，将只运行一次。</li><li>配置为在具有 10 线程的单个线程块中运行后，将运行 10 次。</li><li>配置为在 10 个线程块（每个均具有单线程）中运行后，将运行 10 次。</li><li>配置为在 10 个线程块（每个均具有 10 线程）中运行后，将运行 100 次。</li></ul><h3 id="练习-启动并行运行的核函数" tabindex="-1"><a class="header-anchor" href="#练习-启动并行运行的核函数"><span>练习： 启动并行运行的核函数</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Refactor firstParallel so that it can run on the GPU.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">firstParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This should be running in parallel.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Refactor this call to firstParallel to execute in parallel</span>
<span class="line">   * on the GPU.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  firstParallel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Some code is needed below so that the CPU will wait</span>
<span class="line">   * for the GPU kernels to complete before proceeding.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cuda提供的线程层次结构变量" tabindex="-1"><a class="header-anchor" href="#cuda提供的线程层次结构变量"><span>CUDA提供的线程层次结构变量</span></a></h2><h2 id="线程和块的索引" tabindex="-1"><a class="header-anchor" href="#线程和块的索引"><span>线程和块的索引</span></a></h2><p>每个线程在其线程块内部均会被分配一个索引，从 <code>0</code> 开始。此外，每个线程块也会被分配一个索引，并从 <code>0</code> 开始。正如线程组成线程块，线程块又会组成<strong>网格</strong>，而网格是 CUDA 线程层次结构中级别最高的实体。简言之，CUDA 核函数在由一个或多个线程块组成的网格中执行，且每个线程块中均包含相同数量的一个或多个线程。</p><p>CUDA 核函数可以访问能够识别如下两种索引的特殊变量：正在执行核函数的线程（位于线程块内）索引和线程所在的线程块（位于网格内）索引。这两种变量分别为 <code>threadIdx.x</code> 和 <code>blockIdx.x</code>。</p><h3 id="练习-使用特定的线程和块索引" tabindex="-1"><a class="header-anchor" href="#练习-使用特定的线程和块索引"><span>练习：使用特定的线程和块索引</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">printSuccessForCorrectExecutionConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span>threadIdx<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">1023</span> <span class="token operator">&amp;&amp;</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Update the execution configuration so that the kernel</span>
<span class="line">   * will print \`&quot;Success!&quot;\`.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  printSuccessForCorrectExecutionConfiguration<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加速for循环" tabindex="-1"><a class="header-anchor" href="#加速for循环"><span>加速for循环</span></a></h2><p>对 CPU 应用程序中的循环进行加速的时机已经成熟：我们并非要顺次运行循环的每次迭代，而是让每次迭代都在自身线程中并行运行。考虑以下“for 循环”，尽管很明显，但还是请注意它控制着循环将执行的次数，并会界定循环的每次迭代将会发生的情况：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain" data-title="plain"><pre><code><span class="line">intN=2&lt;&lt;20;</span>
<span class="line">for (inti=0; i&lt;N; ++i)</span>
<span class="line">{</span>
<span class="line">  printf(&quot;%d\\n&quot;, i);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如要并行此循环，必须执行以下 2 个步骤：</p><ul><li>必须编写完成循环的单次迭代工作的核函数。</li><li>由于核函数与其他正在运行的核函数无关，因此执行配置必须使核函数执行正确的次数，例如循环迭代的次数。</li></ul><h3 id="练习-使用单个线程块加速for循环" tabindex="-1"><a class="header-anchor" href="#练习-使用单个线程块加速for循环"><span>练习：使用单个线程块加速for循环</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Refactor \`loop\` to be a CUDA Kernel. The new kernel should</span>
<span class="line"> * only do the work of 1 iteration of the original loop.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;This is iteration number %d\\n&quot;</span><span class="token punctuation">,</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * When refactoring \`loop\` to launch as a kernel, be sure</span>
<span class="line">   * to use the execution configuration to control how many</span>
<span class="line">   * &quot;iterations&quot; to perform.</span>
<span class="line">   *</span>
<span class="line">   * For this exercise, only use 1 block of threads.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  loop<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="协调并行线程" tabindex="-1"><a class="header-anchor" href="#协调并行线程"><span>协调并行线程</span></a></h2><h2 id="调整线程块的大小以实现更多的并行化" tabindex="-1"><a class="header-anchor" href="#调整线程块的大小以实现更多的并行化"><span>调整线程块的大小以实现更多的并行化</span></a></h2><p>线程块包含的线程具有数量限制：确切地说是 1024 个。为增加加速应用程序中的并行量，我们必须要能在多个线程块之间进行协调。</p><p>CUDA 核函数可以访问给出块中线程数的特殊变量：<code>blockDim.x</code>。通过将此变量与 <code>blockIdx.x</code> 和 <code>threadIdx.x</code> 变量结合使用，并借助惯用表达式 <code>threadIdx.x + blockIdx.x * blockDim.x</code> 在包含多个线程的多个线程块之间组织并行执行，并行性将得以提升。以下是详细示例。</p><p>执行配置 <code>&lt;&lt;&lt;10, 10&gt;&gt;&gt;</code> 将启动共计拥有 100 个线程的网格，这些线程均包含在由 10 个线程组成的 10 个线程块中。因此，我们希望每个线程（<code>0</code> 至 <code>99</code> 之间）都能计算该线程的某个唯一索引。</p><ul><li>如果线程块 <code>blockIdx.x</code> 等于 <code>0</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>0</code>。向 <code>0</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>0</code> 至 <code>9</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>1</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>10</code>。向 <code>10</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>10</code> 至 <code>19</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>5</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>50</code>。向 <code>50</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>50</code> 至 <code>59</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>9</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>90</code>。向 <code>90</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>90</code> 至 <code>99</code>。</li></ul><h3 id="练习-加速具有多个线程块的for循环" tabindex="-1"><a class="header-anchor" href="#练习-加速具有多个线程块的for循环"><span>练习：加速具有多个线程块的For循环</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Refactor \`loop\` to be a CUDA Kernel. The new kernel should</span>
<span class="line"> * only do the work of 1 iteration of the original loop.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">int</span> j <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * When refactoring \`loop\` to launch as a kernel, be sure</span>
<span class="line">   * to use the execution configuration to control how many</span>
<span class="line">   * &quot;iterations&quot; to perform.</span>
<span class="line">   *</span>
<span class="line">   * For this exercise, be sure to use more than 1 block in</span>
<span class="line">   * the execution configuration.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  loop<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分配将要在gpu和cpu上访问的内存" tabindex="-1"><a class="header-anchor" href="#分配将要在gpu和cpu上访问的内存"><span>分配将要在GPU和CPU上访问的内存</span></a></h2>`,31)),a("p",null,[n[28]||(n[28]=s("CUDA 的最新版本（版本 6 和更高版本）已能轻松分配可用于 CPU 主机和任意数量 GPU 设备的内存。尽管现今有许多适用于内存管理并可支持加速应用程序中最优性能的 ")),a("a",b,[n[27]||(n[27]=s("中高级技术")),e(p)]),n[29]||(n[29]=s("，但我们现在要介绍的基础 CUDA 内存管理技术不但能够支持远超 CPU 应用程序的卓越性能，而且几乎不会产生任何开发人员成本。"))]),n[40]||(n[40]=l(`<p>如要分配和释放内存，并获取可在主机和设备代码中引用的指针，请使用 <code>cudaMallocManaged</code> 和 <code>cudaFree</code> 取代对 <code>malloc</code> 和 <code>free</code> 的调用，如下例所示：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// CPU-only</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">size_t</span> size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use \`a\` in CPU-only program.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Accelerated</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">size_t</span> size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Note the address of \`a\` is passed as first argument.</span></span>
<span class="line"><span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use \`a\` on the CPU and/or on any GPU in the accelerated system.</span></span>
<span class="line"></span>
<span class="line"><span class="token function">cudaFree</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-主机和设备上的数组操作" tabindex="-1"><a class="header-anchor" href="#练习-主机和设备上的数组操作"><span>练习：主机和设备上的数组操作</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Initialize array values on the host.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Double elements in parallel on the GPU.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__</span>
<span class="line"><span class="token keyword">void</span> <span class="token function">doubleElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Check all elements have been doubled on the host.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">bool <span class="token function">checkElementsAreDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> true<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">size_t</span> size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Refactor this memory allocation to provide a pointer</span>
<span class="line">   * \`a\` that can be used on both the host and the device.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">init</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">size_t</span> threads_per_block <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">size_t</span> number_of_blocks <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * This launch will not work until the pointer \`a\` is also</span>
<span class="line">   * available to the device.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  doubleElements<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>number_of_blocks<span class="token punctuation">,</span> threads_per_block<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  bool areDoubled <span class="token operator">=</span> <span class="token function">checkElementsAreDoubled</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;All elements were doubled? %s\\n&quot;</span><span class="token punctuation">,</span> areDoubled <span class="token operator">?</span> <span class="token string">&quot;TRUE&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;FALSE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Refactor to free memory that has been allocated to be</span>
<span class="line">   * accessed by both the host and the device.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaFree</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网格大小与工作量不匹配" tabindex="-1"><a class="header-anchor" href="#网格大小与工作量不匹配"><span>网格大小与工作量不匹配</span></a></h2><h2 id="如何处理块配置与所需线程数不匹配" tabindex="-1"><a class="header-anchor" href="#如何处理块配置与所需线程数不匹配"><span>如何处理块配置与所需线程数不匹配</span></a></h2><p>可能会出现这样的情况，执行配置所创建的线程数无法匹配为实现并行循环所需的线程数。</p><p>一个常见的例子与希望选择的最佳线程块大小有关。例如，鉴于 GPU 的硬件特性，所含线程的数量为 32 的倍数的线程块是最理想的选择，因其具备性能上的优势。假设我们要启动一些线程块且每个线程块中均包含 256 个线程（32 的倍数），并需运行 1000 个并行任务（此处使用极小的数量以便于说明），则任何数量的线程块均无法在网格中精确生成 1000 个总线程，因为没有任何整数值在乘以 32 后可以恰好等于 1000。</p><p>这个问题可以通过以下方式轻松地解决：</p><ul><li>编写执行配置，使其创建的线程数<strong>超过</strong>执行分配工作所需的线程数。</li><li>将一个值作为参数传递到核函数 (<code>N</code>) 中，该值表示要处理的数据集总大小或完成工作所需的总线程数。</li><li>计算网格内的线程索引后（使用 <code>threadIdx + blockIdx*blockDim</code>），请检查该索引是否超过 <code>N</code>，并且只在不超过的情况下执行与核函数相关的工作。</li></ul><p>以下是编写执行配置的惯用方法示例，适用于 <code>N</code> 和线程块中的线程数已知，但无法保证网格中的线程数和 <code>N</code> 之间完全匹配的情况。如此一来，便可确保网格中至少始终拥有 <code>N</code> 所需的线程数，且超出的线程数至多仅可相当于 1 个线程块的线程数量：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">// Assume \`N\` is known</span></span>
<span class="line"><span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Assume we have a desire to set \`threads_per_block\` exactly to \`256\`</span></span>
<span class="line">size_t threads_per_block <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ensure there are at least \`N\` threads in the grid, but only 1 block&#39;s worth extra</span></span>
<span class="line">size_t number_of_blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> threads_per_block <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads_per_block<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">some_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>number_of_blocks<span class="token punctuation">,</span> threads_per_block<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于上述执行配置致使网格中的线程数超过 <code>N</code>，因此需要注意 <code>some_kernel</code> 定义中的内容，以确保 <code>some_kernel</code> 在由其中一个 ”额外的” 线程执行时不会尝试访问超出范围的数据元素：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">__global__ <span class="token function">some_kernel</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> idx <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token comment">// Check to make sure \`idx\` maps to some value within \`N\`</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Only do work if it does</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-使用不匹配的执行配置来加速for循环" tabindex="-1"><a class="header-anchor" href="#练习-使用不匹配的执行配置来加速for循环"><span>练习：使用不匹配的执行配置来加速For循环</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * Currently, \`initializeElementsTo\`, if executed in a thread whose</span>
<span class="line"> * \`i\` is calculated to be greater than \`N\`, will try to access a value</span>
<span class="line"> * outside the range of \`a\`.</span>
<span class="line"> *</span>
<span class="line"> * Refactor the kernel defintition to prevent our of range accesses.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">initializeElementsTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialValue<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> </span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> initialValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Do not modify \`N\`.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">  size_t size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Assume we have reason to want the number of threads</span>
<span class="line">   * fixed at \`256\`: do not modify \`threads_per_block\`.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  size_t threads_per_block <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Assign a value to \`number_of_blocks\` that will</span>
<span class="line">   * allow for a working execution configuration given</span>
<span class="line">   * the fixed values for \`N\` and \`threads_per_block\`.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  size_t number_of_blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads_per_block<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> initialValue <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  initializeElementsTo<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>number_of_blocks<span class="token punctuation">,</span> threads_per_block<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">,</span> a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Check to make sure all values in \`a\`, were initialized.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> initialValue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FAILURE: target value: %d\\t a[%d]: %d\\n&quot;</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaFree</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="跨网格的循环" tabindex="-1"><a class="header-anchor" href="#跨网格的循环"><span>跨网格的循环</span></a></h2><h2 id="数据集比网格大" tabindex="-1"><a class="header-anchor" href="#数据集比网格大"><span>数据集比网格大</span></a></h2><p>或出于选择，为了要创建具有超高性能的执行配置，或出于需要，一个网格中的线程数量可能会小于数据集的大小。请思考一下包含 1000 个元素的数组和包含 250 个线程的网格（此处使用极小的规模以便于说明）。此网格中的每个线程将需使用 4 次。如要实现此操作，一种常用方法便是在核函数中使用<strong>跨网格循环</strong>。</p><p>在跨网格循环中，每个线程将在网格内使用 <code>threadIdx + blockIdx*blockDim</code> 计算自身唯一的索引，并对数组内该索引的元素执行相应运算，然后将网格中的线程数添加到索引并重复此操作，直至超出数组范围。例如，对于包含 500 个元素的数组和包含 250 个线程的网格，网格中索引为 20 的线程将执行如下操作：</p><ul><li>对包含 500 个元素的数组的元素 20 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 270</li><li>对包含 500 个元素的数组的元素 270 执行相应运算</li><li>将其索引增加 250，使网格的大小达到 520</li><li>由于 520 现已超出数组范围，因此线程将停止工作</li></ul><p>CUDA 提供一个可给出网格中线程块数的特殊变量：<code>gridDim.x</code>。然后计算网格中的总线程数，即网格中的线程块数乘以每个线程块中的线程数：<code>gridDim.x * blockDim.x</code>。带着这样的想法来看看以下核函数中网格跨度循环的详细示例：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">__global <span class="token keyword">void</span> <span class="token function">kernel</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> indexWithinTheGrid <span class="token operator">=</span> threadIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> gridStride <span class="token operator">=</span> gridDim<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexWithinTheGrid<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> gridStride<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do work on a[i];</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2>`,24)),a("p",null,[n[31]||(n[31]=s("与在任何应用程序中一样，加速 CUDA 代码中的错误处理同样至关重要。即便不是大多数，也有许多 CUDA 函数（例如，")),a("a",h,[n[30]||(n[30]=s("内存管理函数")),e(p)]),n[32]||(n[32]=s("）会返回类型为 ")),n[33]||(n[33]=a("code",null,"cudaError_t",-1)),n[34]||(n[34]=s(" 的值，该值可用于检查调用函数时是否发生错误。以下是对调用 ")),n[35]||(n[35]=a("code",null,"cudaMallocManaged",-1)),n[36]||(n[36]=s(" 函数执行错误处理的示例："))]),n[41]||(n[41]=l(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">cudaError_t err<span class="token punctuation">;</span></span>
<span class="line">err <span class="token operator">=</span> <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span>                    <span class="token comment">// Assume the existence of \`a\` and \`N\`.</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span>                           <span class="token comment">// \`cudaSuccess\` is provided by CUDA.</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`cudaGetErrorString\` is provided by CUDA.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动定义为返回 <code>void</code> 的核函数后，将不会返回类型为 <code>cudaError_t</code> 的值。为检查启动核函数时是否发生错误（例如，如果启动配置错误），CUDA 提供 <code>cudaGetLastError</code> 函数，该函数会返回类型为 <code>cudaError_t</code> 的值。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line"> * This launch should cause an error, but the kernel itself</span>
<span class="line"> * cannot return it.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">someKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -1 is not a valid number of threads.</span></span>
<span class="line"></span>
<span class="line">cudaError_t err<span class="token punctuation">;</span></span>
<span class="line">err <span class="token operator">=</span> <span class="token function">cudaGetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \`cudaGetLastError\` will return the error from above.</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，为捕捉异步错误（例如，在异步核函数执行期间），请务必检查后续同步 CUDA 运行时 API 调用所返回的状态（例如 <code>cudaDeviceSynchronize</code>）；如果之前启动的其中一个核函数失败，则将返回错误。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * In the current application, \`N\` is larger than the grid.</span>
<span class="line"> * Refactor this kernel to use a grid-stride loop in order that</span>
<span class="line"> * each parallel thread work on more than one element of the array.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">__global__</span>
<span class="line"><span class="token keyword">void</span> <span class="token function">doubleElements</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> gridStride <span class="token operator">=</span> gridDim<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> gridStride<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">bool</span> <span class="token function">checkElementsAreDoubled</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * \`N\` is greater than the size of the grid (see below).</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  size_t size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaMallocManaged</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">init</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * The size of this grid is 256*32 = 8192.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  size_t threads_per_block <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span></span>
<span class="line">  size_t number_of_blocks <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  doubleElements<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>number_of_blocks<span class="token punctuation">,</span> threads_per_block<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">bool</span> areDoubled <span class="token operator">=</span> <span class="token function">checkElementsAreDoubled</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;All elements were doubled? %s\\n&quot;</span><span class="token punctuation">,</span> areDoubled <span class="token operator">?</span> <span class="token string">&quot;TRUE&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;FALSE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaFree</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cuda错误处理功能" tabindex="-1"><a class="header-anchor" href="#cuda错误处理功能"><span>CUDA错误处理功能</span></a></h3><p>创建一个包装 CUDA 函数调用的宏对于检查错误十分有用。以下是一个宏示例，您可以在余下练习中随时使用：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">inline</span> cudaError_t <span class="token function">checkCuda</span><span class="token punctuation">(</span>cudaError_t result<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> cudaSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;CUDA Runtime Error: %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">cudaGetErrorString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">assert</span><span class="token punctuation">(</span>result <span class="token operator">==</span> cudaSuccess<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * The macro can be wrapped around any function returning</span>
<span class="line"> * a value of type \`cudaError_t\`.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">checkCuda</span><span class="token punctuation">(</span> <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最后练习-加速向量加法" tabindex="-1"><a class="header-anchor" href="#最后练习-加速向量加法"><span>最后练习：加速向量加法</span></a></h3><p>下面的挑战将使您有机会运用在实验中学到的知识。其中涉及加速 CPU 向量加法程序，尽管该程序不甚复杂，但仍能让您有机会重点运用所学的借助 CUDA 加速 GPU 应用程序的相关知识。完成此练习后，如果您有富余时间并有意深究，可继续学习<em>高阶内容</em>部分以了解涉及更复杂代码库的一些挑战。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">initWith</span><span class="token punctuation">(</span><span class="token keyword">float</span> num<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">addVectorsInto</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>result<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">checkElementsAre</span><span class="token punctuation">(</span><span class="token keyword">float</span> target<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>array<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FAIL: array[%d] - %0.0f does not equal %0.0f\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SUCCESS! All values added correctly.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">  size_t size <span class="token operator">=</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">float</span> <span class="token operator">*</span>c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">initWith</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">initWith</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">initWith</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">addVectorsInto</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">checkElementsAre</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2维和3维的网格和块" tabindex="-1"><a class="header-anchor" href="#_2维和3维的网格和块"><span>2维和3维的网格和块</span></a></h2><p>可以将网格和线程块定义为最多具有 3 个维度。使用多个维度定义网格和线程块绝不会对其性能造成任何影响，但这在处理具有多个维度的数据时可能非常有用，例如 2D 矩阵。如要定义二维或三维网格或线程块，可以使用 CUDA 的 <code>dim3</code> 类型，即如下所示：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line">dim3 <span class="token function">threads_per_block</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dim3 <span class="token function">number_of_blocks</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">someKernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>number_of_blocks<span class="token punctuation">,</span> threads_per_block<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>鉴于以上示例，<code>someKernel</code> 内部的变量 <code>gridDim.x</code>、<code>gridDim.y</code>、<code>blockDim.x</code> 和 <code>blockDim.y</code> 均将等于 <code>16</code>。</p><h3 id="练习-加速2d矩阵乘法应用" tabindex="-1"><a class="header-anchor" href="#练习-加速2d矩阵乘法应用"><span>练习：加速2D矩阵乘法应用</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span>  <span class="token expression"><span class="token number">64</span></span></span></span>
<span class="line"></span>
<span class="line">__global__ <span class="token keyword">void</span> <span class="token function">matrixMulGPU</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> c <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Build out this kernel.</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> row <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> col <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>y <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>y <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>y<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> col <span class="token operator">&lt;</span> N<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span></span>
<span class="line">      val <span class="token operator">+=</span> a<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    c<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * This CPU function already works, and will run to create a solution matrix</span>
<span class="line"> * against which to verify your work building out the matrixMulGPU kernel.</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">matrixMulCPU</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> c <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>row <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>col <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span></span>
<span class="line">        val <span class="token operator">+=</span> a<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      c<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>c_cpu<span class="token punctuation">,</span> <span class="token operator">*</span>c_gpu<span class="token punctuation">;</span> <span class="token comment">// Allocate a solution matrix for both the CPU and the GPU operations</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">int</span> size <span class="token operator">=</span> N <span class="token operator">*</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Number of bytes of an N x N matrix</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Allocate memory</span></span>
<span class="line">  <span class="token function">cudaMallocManaged</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaMallocManaged</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaMallocManaged</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>c_cpu<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaMallocManaged</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>c_gpu<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Initialize memory; create 2D matrices</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>row <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>col <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">      a<span class="token punctuation">[</span>row<span class="token operator">*</span>N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">;</span></span>
<span class="line">      b<span class="token punctuation">[</span>row<span class="token operator">*</span>N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">      c_cpu<span class="token punctuation">[</span>row<span class="token operator">*</span>N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">      c_gpu<span class="token punctuation">[</span>row<span class="token operator">*</span>N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">/*</span>
<span class="line">   * Assign \`threads_per_block\` and \`number_of_blocks\` 2D values</span>
<span class="line">   * that can be used in matrixMulGPU above.</span>
<span class="line">   */</span></span>
<span class="line"></span>
<span class="line">  dim3 <span class="token function">threads_per_block</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  dim3 <span class="token function">number_of_blocks</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>N <span class="token operator">/</span> threads_per_block<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>N <span class="token operator">/</span> threads_per_block<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  matrixMulGPU <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> number_of_blocks<span class="token punctuation">,</span> threads_per_block <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c_gpu <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Call the CPU version to check our work</span></span>
<span class="line">  <span class="token function">matrixMulCPU</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c_cpu <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Compare the two answers to make sure they are equal</span></span>
<span class="line">  <span class="token keyword">bool</span> error <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">;</span> <span class="token operator">++</span>row <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">;</span> <span class="token operator">++</span>col <span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>c_cpu<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span> <span class="token operator">!=</span> c_gpu<span class="token punctuation">[</span>row <span class="token operator">*</span> N <span class="token operator">+</span> col<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FOUND ERROR at c[%d][%d]\\n&quot;</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Success!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Free all our allocated memory</span></span>
<span class="line">  <span class="token function">cudaFree</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cudaFree</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">cudaFree</span><span class="token punctuation">(</span> c_cpu <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">cudaFree</span><span class="token punctuation">(</span> c_gpu <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17))])}const w=t(u,[["render",g],["__file","1.html.vue"]]),x=JSON.parse('{"path":"/blogs/cuda/1.html","title":"CUDA入门","lang":"en-US","frontmatter":{"title":"CUDA入门","date":"2022/05/30","tags":["机器学习"],"categories":["cuda"]},"headers":[{"level":2,"title":"加速系统","slug":"加速系统","link":"#加速系统","children":[]},{"level":2,"title":"由GPU加速的还是纯CPU的应用程序","slug":"由gpu加速的还是纯cpu的应用程序","link":"#由gpu加速的还是纯cpu的应用程序","children":[]},{"level":2,"title":"为GPU编写应用程序代码","slug":"为gpu编写应用程序代码","link":"#为gpu编写应用程序代码","children":[{"level":3,"title":"","slug":"","link":"#","children":[]},{"level":3,"title":"练习：编写一个Hello GPU核函数","slug":"练习-编写一个hello-gpu核函数","link":"#练习-编写一个hello-gpu核函数","children":[]},{"level":3,"title":"编译并运行加速后的CUDA代码","slug":"编译并运行加速后的cuda代码","link":"#编译并运行加速后的cuda代码","children":[]}]},{"level":2,"title":"CUDA的线程层次结构","slug":"cuda的线程层次结构","link":"#cuda的线程层次结构","children":[]},{"level":2,"title":"启动并行运行的核函数","slug":"启动并行运行的核函数","link":"#启动并行运行的核函数","children":[{"level":3,"title":"练习： 启动并行运行的核函数","slug":"练习-启动并行运行的核函数","link":"#练习-启动并行运行的核函数","children":[]}]},{"level":2,"title":"CUDA提供的线程层次结构变量","slug":"cuda提供的线程层次结构变量","link":"#cuda提供的线程层次结构变量","children":[]},{"level":2,"title":"线程和块的索引","slug":"线程和块的索引","link":"#线程和块的索引","children":[{"level":3,"title":"练习：使用特定的线程和块索引","slug":"练习-使用特定的线程和块索引","link":"#练习-使用特定的线程和块索引","children":[]}]},{"level":2,"title":"加速for循环","slug":"加速for循环","link":"#加速for循环","children":[{"level":3,"title":"练习：使用单个线程块加速for循环","slug":"练习-使用单个线程块加速for循环","link":"#练习-使用单个线程块加速for循环","children":[]}]},{"level":2,"title":"协调并行线程","slug":"协调并行线程","link":"#协调并行线程","children":[]},{"level":2,"title":"调整线程块的大小以实现更多的并行化","slug":"调整线程块的大小以实现更多的并行化","link":"#调整线程块的大小以实现更多的并行化","children":[{"level":3,"title":"练习：加速具有多个线程块的For循环","slug":"练习-加速具有多个线程块的for循环","link":"#练习-加速具有多个线程块的for循环","children":[]}]},{"level":2,"title":"分配将要在GPU和CPU上访问的内存","slug":"分配将要在gpu和cpu上访问的内存","link":"#分配将要在gpu和cpu上访问的内存","children":[{"level":3,"title":"练习：主机和设备上的数组操作","slug":"练习-主机和设备上的数组操作","link":"#练习-主机和设备上的数组操作","children":[]}]},{"level":2,"title":"网格大小与工作量不匹配","slug":"网格大小与工作量不匹配","link":"#网格大小与工作量不匹配","children":[]},{"level":2,"title":"如何处理块配置与所需线程数不匹配","slug":"如何处理块配置与所需线程数不匹配","link":"#如何处理块配置与所需线程数不匹配","children":[{"level":3,"title":"练习：使用不匹配的执行配置来加速For循环","slug":"练习-使用不匹配的执行配置来加速for循环","link":"#练习-使用不匹配的执行配置来加速for循环","children":[]}]},{"level":2,"title":"跨网格的循环","slug":"跨网格的循环","link":"#跨网格的循环","children":[]},{"level":2,"title":"数据集比网格大","slug":"数据集比网格大","link":"#数据集比网格大","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[{"level":3,"title":"CUDA错误处理功能","slug":"cuda错误处理功能","link":"#cuda错误处理功能","children":[]},{"level":3,"title":"最后练习：加速向量加法","slug":"最后练习-加速向量加法","link":"#最后练习-加速向量加法","children":[]}]},{"level":2,"title":"2维和3维的网格和块","slug":"_2维和3维的网格和块","link":"#_2维和3维的网格和块","children":[{"level":3,"title":"练习：加速2D矩阵乘法应用","slug":"练习-加速2d矩阵乘法应用","link":"#练习-加速2d矩阵乘法应用","children":[]}]}],"git":{"createdTime":1698896250000,"updatedTime":1700045822000,"contributors":[{"name":"liqiu03","email":"liqiu03@baidu.com","commits":1}]},"filePathRelative":"blogs/cuda/1.md"}');export{w as comp,x as data};
